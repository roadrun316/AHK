#NoEnv  ; Recommended for performance and reliability.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

; 변수 설정
CaptureX := 100  ; 캡처 시작 X 좌표
CaptureY := 100  ; 캡처 시작 Y 좌표
CaptureWidth := 400 ; 캡처 너비
CaptureHeight := 200 ; 캡처 높이
OCR_Language := "kor" ; OCR 언어 설정 (한국어)

; 단축키 설정 (Ctrl+Shift+C)
^+c::
{
    ; 1. 화면 캡처
    ScreenshotFileName := "temp_screenshot.png"

    ; 전체 화면 캡처
    DllCall("PrintWindow", "UInt", WinExist(), "UInt", DllCall("GetDC", "UInt", WinExist()), "UInt", 0)
    hBitmap := DllCall("gdi32.dll\CreateCompatibleBitmap", "UInt", DllCall("gdi32.dll\GetDC", "UInt", 0), "Int", CaptureWidth, "Int", CaptureHeight)
    hDC := DllCall("gdi32.dll\CreateCompatibleDC", "UInt", DllCall("gdi32.dll\GetDC", "UInt", 0))
    hOld := DllCall("gdi32.dll\SelectObject", "UInt", hDC, "UInt", hBitmap)

    ; 캡처 영역 복사
    DllCall("gdi32.dll\BitBlt", "UInt", hDC, "Int", 0, "Int", 0, "Int", CaptureWidth, "Int", CaptureHeight, "UInt", DllCall("gdi32.dll\GetDC", "UInt", 0), "Int", CaptureX, "Int", CaptureY, "UInt", 0x00CC0020)  ; SRCCOPY

    ; 이미지 저장 (GDI+ 필요)
    pToken := Gdip_Startup()
    Gdip_SaveBitmapToFile(hBitmap, ScreenshotFileName)
    Gdip_Shutdown(pToken)

    ; 2. OCR 실행
    OCROutputFile := "temp_ocr_output.txt"
    RunWait, tesseract "%ScreenshotFileName%" "%OCROutputFile%" -l %OCR_Language%,, Hide

    ; 3. 텍스트 읽기
    FileRead, OCRText, %OCROutputFile%.txt

    ; 4. 클립보드에 복사
    Clipboard := OCRText

    ; 5. 정리
    FileDelete, %ScreenshotFileName%
    FileDelete, %OCROutputFile%.txt
    DllCall("gdi32.dll\SelectObject", "UInt", hDC, "UInt", hOld)
    DllCall("gdi32.dll\DeleteDC", "UInt", hDC)
    DllCall("gdi32.dll\DeleteObject", "UInt", hBitmap)

    ; 6. 알림
    ToolTip, OCR 완료! 클립보드에 복사되었습니다.
    SetTimer, RemoveToolTip, -2000 ; 2초 후 툴팁 제거
    return
}

RemoveToolTip:
    ToolTip
    return

; GDI+ 함수 (이미지 저장을 위해 필요)
Gdip_Startup() {
    If !DllCall("GetModuleHandle", "Str", "gdiplus.dll", "Ptr")
        DllCall("LoadLibrary", "Str", "gdiplus.dll")
    VarSetCapacity(pToken,8,0)
    gdiplus := {Startup: "GdiplusStartup", Shutdown: "GdiplusShutdown", CreateBitmapFromFile: "GdipCreateBitmapFromFile", GetImageWidth: "GdipGetImageWidth", GetImageHeight: "GdipGetImageHeight", DeleteGraphics: "GdipDeleteGraphics", CreateHDC: "GdipCreateHDCFromGraphics", GetGraphicsContext: "GdipGetImageGraphicsContext", ReleaseDC: "GdipReleaseDC", CreateBitmapFromHBITMAP: "GdipCreateBitmapFromHBITMAP", CreateBitmapFromHWND: "GdipCreateBitmapFromHWND", CreateGraphicsFromHDC: "GdipCreateGraphicsFromHDC", CreateStringFormat: "GdipCreateStringFormat", SetStringFormatFlags: "GdipSetStringFormatFlags", DeleteStringFormat: "GdipDeleteStringFormat", DrawString: "GdipDrawString", CreateSolidBrush: "GdipCreateSolidBrush", DeleteBrush: "GdipDeleteBrush", CreatePen1: "GdipCreatePen1", DeletePen: "GdipDeletePen", DrawLine: "GdipDrawLine", CreateFont: "GdipCreateFont", DeleteFont: "GdipDeleteFont", DeleteBitmap: "GdipDeleteBitmap", DrawImage: "GdipDrawImage", GetImageEncodersSize: "GdipGetImageEncodersSize", GetImageEncoders: "GdipGetImageEncoders", GetEncoderClsid: "GdipGetEncoderClsid", SaveBitmapToFile: "GdipSaveBitmapToFile", CreateMatrix: "GdipCreateMatrix", RotateMatrix: "GdipRotateMatrix", DeleteMatrix: "GdipDeleteMatrix", SetWorldTransform: "GdipSetWorldTransform", InvertMatrix: "GdipInvertMatrix", TransformMatrixPoints: "GdipTransformMatrixPoints", CreateRegion: "GdipCreateRegion", SetEmptyRegion: "GdipSetEmptyRegion", SetRectRegion: "GdipSetRectRegion", DeleteRegion: "GdipDeleteRegion", IsVisibleRegionPointI: "GdipIsVisibleRegionPointI", GetRegionScans: "GdipGetRegionScans", SetInfiniteRegion: "GdipSetInfiniteRegion", SetPathRegion: "GdipSetPathRegion", CreatePath: "GdipCreatePath", DeletePath: "GdipDeletePath", AddPathRectangleI: "GdipAddPathRectangleI", GetPathData: "GdipGetPathData", StartPathFigure: "GdipStartPathFigure", AddPathLineI: "GdipAddPathLineI", ClosePathFigure: "GdipClosePathFigure", CreateFromGraphics: "GdipCreateFromGraphics", MeasureString: "GdipMeasureString"}
    If (NumGet(pToken,0,"UInt") == 0)
    {
        VarSetCapacity(si,16,0)
        NumPut(1,si,0,"UInt")
        DllCall("gdiplus\GdiplusStartup", "UPtr*", pToken, "Ptr", &si, "Ptr", 0)
    }
    return pToken
}

Gdip_Shutdown(pToken) {
    DllCall("gdiplus\GdiplusShutdown", "UPtr", pToken)
}

Gdip_SaveBitmapToFile(hBitmap, Filename) {
  static CLSID := "{557cf406-1a04-11d3-9a73-0000f81ef32e}" ; png encoder
  VarSetCapacity(EncoderClsid,16,0)
  if !CLSID
  {
      num := 0, size := 0
      DllCall("gdiplus\GdipGetImageEncodersSize", "UInt*", num, "UInt*", size)
      VarSetCapacity(Encoders,size)
      DllCall("gdiplus\GdipGetImageEncoders", "UInt", num, "UInt", size, "Ptr", &Encoders)
      Loop %num%
      {
        offset := (A_Index - 1) * 116
        Guid := SubStr(StrReplace(Format("{:U}", NumGet(Encoders,offset + 0,"CLSID")), "0x", ""),2)
        if (Guid = "{557cf406-1a04-11d3-9a73-0000f81ef32e}") ; png encoder
        {
           DllCall("ole32\CLSIDFromString", "WStr", Guid, "Ptr", &EncoderClsid)
           break
        }
      }
  }
  else DllCall("ole32\CLSIDFromString", "WStr", CLSID, "Ptr", &EncoderClsid)
  return DllCall("gdiplus\GdipSaveBitmapToFile", "UInt", hBitmap, "WStr", Filename, "Ptr", &EncoderClsid, "Ptr", 0)
}